# -*- coding: utf-8 -*-
"""strucai_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZBQ5tJ9XSJaB1HIoGYOfspd1hyOehbwj
"""

import streamlit as st
import pandas as pd
import joblib

# Load the trained model and label encoder
model = joblib.load("strucai_rf_model.pkl")
label_encoder = joblib.load("strucai_label_encoder.pkl")

# App Title
st.title("üèóÔ∏è StrucAI - Structural Health Risk Predictor")

# Introduction
st.markdown("""
This AI-powered tool helps civil engineers predict the **risk level** of buildings or bridges using basic sensor readings and structure age.
It uses a machine learning model trained on 10,000+ simulated data points.
""")

# Sidebar Inputs
st.sidebar.header("üì• Input Parameters")
vib = st.sidebar.slider("Vibration (Hz)", 8.0, 20.0, 12.5)
strain = st.sidebar.slider("Strain (¬µŒµ)", 50, 200, 100)
temp = st.sidebar.slider("Temperature (¬∞C)", 20, 45, 30)
crack = st.sidebar.slider("Crack Width (mm)", 0.0, 1.5, 0.5)
age = st.sidebar.slider("Age (months)", 0, 60, 12)

# Predict button
if st.sidebar.button("Predict Risk"):
    input_df = pd.DataFrame([[vib, strain, temp, crack, age]],
                            columns=["Vibration_Hz", "Strain_ue", "Temperature_C", "Crack_Width_mm", "Age_months"])

    # Make prediction
    prediction = model.predict(input_df)[0]
    confidence = model.predict_proba(input_df).max()
    label = label_encoder.inverse_transform([prediction])[0]

    # Display result
    st.subheader("Prediction Result")
    st.markdown(f"**Predicted Risk Level:** `{label}`")
    st.markdown(f"**Model Confidence:** `{confidence:.2%}`")

    # Feedback emoji
    if label == "Low":
        st.success("‚úÖ Structure is in good condition.")
    elif label == "Medium":
        st.warning("‚ö†Ô∏è Moderate risk ‚Äì consider inspection.")
    else:
        st.error("üö® High risk ‚Äì maintenance or review needed!")

# Upload CSV with historical data
# Historical trend analysis
st.markdown("---")
st.markdown("### üìà Monthly Peak Analysis for Multiple Features")

uploaded_file = st.file_uploader("Upload historical data CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, parse_dates=["Timestamp"])
    df = df.sort_values("Timestamp")
    df["Month"] = df["Timestamp"].dt.to_period("M").astype(str)

    # Select features to plot
    default_features = ["Vibration_Hz", "Strain_ue", "Temperature_C", "Crack_Width_mm"]
    features = st.multiselect("Select features to visualize monthly peaks:", df.columns[1:-1], default=default_features)

    if features:
        monthly_peaks = df.groupby("Month")[features].max().reset_index()
        monthly_peaks = monthly_peaks.set_index("Month")
        st.line_chart(monthly_peaks)
    else:
        st.info("Please select at least one feature to visualize.")

# Footer
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è during the #3MTT program.")